name: Run Paper Ranking Script and Open Issue

on:
  schedule:
    - cron: '0 0 1 * *' # runs every first day of month at midnight

  workflow_dispatch:

jobs:
  paper-ranking:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12.2'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/bioregistry/analysis/paper_ranking_requirements.txt

    - name: Run Paper Ranking Script
      id: run-script
      run: |
        python src/bioregistry/analysis/paper_ranking.py

    - name: Set Date Variables
      id: set-date-variables
      run: |
        end_date=$(date +'%Y-%m-%d')
        start_date=$(date -d "$end_date - 30 days" +'%Y-%m-%d')
        echo "START_DATE=$start_date" >> $GITHUB_ENV
        echo "END_DATE=$end_date" >> $GITHUB_ENV

    - name: Upload Full List as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: full-predictions-list
        path: exports/analyses/paper_ranking/predictions.tsv

    - name: Create GitHub Issue
      id: create-issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          const content = fs.readFileSync('exports/analyses/paper_ranking/predictions.tsv', 'utf8');
          const lines = content.split('\n').slice(1, 21); // Get top 20 papers, excluding header
          const rows = lines.map(line => {
            const [pubmed, title, , , year] = line.split('\t');
            const link = `https://bioregistry.io/pubmed:${pubmed}`;
            return `| [${pubmed}](${link}) | ${title} | ${year} |`;
          });
          const tableHeader = '| PubMed ID | Title | Year |\n| --- | --- | --- |\n';
          const issueTitle = `Paper Ranking Results from ${process.env.START_DATE} to ${process.env.END_DATE}`;
          const issueBody = `Here are the top 20 papers from the ranked list of PubMed papers from the last 30 days. The entire list can be found [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts).\n\n${tableHeader}${rows.join('\n')}`;
          const response = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
          });
          console.log(`Created issue #${response.data.number}`);
