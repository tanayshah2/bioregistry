name: Run Paper Ranking Script and Update Issue

on:
  schedule:
    - cron: '0 0 1 * *' # runs on the first day of every month

  workflow_dispatch:

jobs:
  paper-ranking:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12.2'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/bioregistry/analysis/paper_ranking_requirements.txt

    - name: Run Paper Ranking Script
      id: run-ranking-script
      run: |
        python src/bioregistry/analysis/paper_ranking.py

    - name: Set Date Variables
      id: set-date-variables
      run: |
        end_date=$(date +'%Y-%m-%d')
        start_date=$(date -d "$end_date - 30 days" +'%Y-%m-%d')
        echo "START_DATE=$start_date" >> $GITHUB_ENV
        echo "END_DATE=$end_date" >> $GITHUB_ENV

    - name: Find Existing Issue
      id: find-issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'paper-ranking-results'
          });
          const issue = issues.find(issue => issue.title === 'Paper Ranking Results');
          return issue ? issue.number : null;

    - name: Merge with Curated Papers
      id: merge-curated-papers
      run: |
        curated_file="src/bioregistry/curation/curated_papers.csv"
        if [ ! -f "$curated_file" ]; then
          echo "pmid,title,score,relevant,relevancy_type,notes" > "$curated_file"
        fi
        merged_file="exports/analyses/paper_ranking/merged_predictions.csv"
        python src/bioregistry/analysis/merge_and_rerank.py $curated_file exports/analyses/paper_ranking/predictions.tsv $merged_file
        mv $merged_file $curated_file

    - name: Upload Full List as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: full-predictions-list
        path: merged_and_reranked_predictions.csv

    - name: Create or Update Issue with Comment
      id: create-or-update-issue
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const issueNumber = ${{ steps.find-issue.outputs.result }};
          const startDate = process.env.START_DATE;
          const endDate = process.env.END_DATE;
          const content = fs.readFileSync('exports/analyses/paper_ranking/predictions.tsv', 'utf8');
          const lines = content.split('\n').slice(1, 21);
          const rows = lines.map(line => {
            const [pubmed, title] = line.split('\t');
            const link = `https://bioregistry.io/pubmed:${pubmed}`;
            return `| [${pubmed}](${link}) | ${title} |`;
          });
          const tableHeader = '| PubMed ID | Title |\n| --- | --- |\n';
          const commentBody = `**New entries for ${startDate} to ${endDate}:**\n\n${tableHeader}${rows.join('\n')}`;
          const issueBody = `This issue contains monthly updates to the ranked list of PubMed papers for curation. The full list can be found [here](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/exports/analyses/paper_ranking/predictions.tsv). You can view and edit the curated papers file [here](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/src/bioregistry/curation/curated_papers.csv).`;

          if (issueNumber) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: commentBody,
            });
          } else {
            const response = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Paper Ranking Results',
              body: `${issueBody}\n\n${commentBody}`,
              labels: ['paper-ranking-results'],
            });
            core.setOutput('issue-number', response.data.number);
          }
