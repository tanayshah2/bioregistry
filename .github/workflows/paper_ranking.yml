name: Run Paper Ranking Script and Open Issue

on:
  schedule:
    - cron: '0 0 * * 1' # runs every Monday at midnight

  workflow_dispatch:

jobs:
  paper-ranking:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12.2'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/bioregistry/analysis/paper_ranking_requirements.txt

    - name: Merge New Papers and Re-Rank
      id: merge-re-rank
      run: |
        python src/bioregistry/analysis/merge_and_rerank.py

    - name: Create or Update Curated Papers File
      id: update-curated-papers-file
      run: |
        curated_file="src/bioregistry/curation/curated_papers.csv"
        if [ ! -f "$curated_file" ]; then
          echo "pmid,relevant,relevancy_type,notes" > "$curated_file"
        fi
        # Check if the merged_and_reranked_predictions.csv file exists before proceeding
        if [ -f merged_and_reranked_predictions.csv ]; then
          awk -F, 'NR==FNR{a[$1]; next} !($1 in a)' "$curated_file" merged_and_reranked_predictions.csv > exports/analyses/paper_ranking/filtered_predictions.csv
        else
          echo "File merged_and_reranked_predictions.csv not found. Skipping filtering."
        fi

    - name: Upload Full List as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: full-predictions-list
        path: merged_and_reranked_predictions.csv

    - name: Create GitHub Issue
      id: create-issue
      if: files.exists('exports/analyses/paper_ranking/filtered_predictions.csv') # Run only if the file exists
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const content = fs.readFileSync('exports/analyses/paper_ranking/filtered_predictions.csv', 'utf8');
          const lines = content.split('\n').slice(1, 21); // Get top 20 papers, excluding header
          const rows = lines.map(line => {
            const [pubmed, title] = line.split('\t');
            const link = `https://bioregistry.io/pubmed:${pubmed}`;
            return `| [${pubmed}](${link}) | ${title} |`;
          });
          const tableHeader = '| PubMed ID | Title |\n| --- | --- |\n';
          const issueTitle = `Paper Ranking Results from ${process.env.START_DATE} to ${process.env.END_DATE}`;
          const curatedLink = `https://github.com/${{ github.repository }}/edit/${{ github.ref }}/src/bioregistry/curation/curated_papers.csv`;
          const issueBody = `Here are the top 20 papers from the ranked list of PubMed papers from the last 30 days. The entire list can be found [here](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/exports/analyses/paper_ranking/predictions.tsv).\n\nYou can edit the curated papers file [here](${curatedLink}).\n\n${tableHeader}${rows.join('\n')}`;
          const response = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
          });
          console.log(`Created issue #${response.data.number}`);
